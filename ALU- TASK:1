# VERILOG CODE
module alu(
    input [7:0] a,     // Operand A
    input [7:0] b,     // Operand B
    input [2:0] op,    // Operation code
    output reg [7:0] result // Result
);

    always @(a, b, op) begin
        case (op)
            3'b000: result = a + b;     // Addition
            3'b001: result = a - b;     // Subtraction
            3'b010: result = a & b;     // Bitwise AND
            3'b011: result = a | b;     // Bitwise OR
            3'b100: result = ~a;        // Bitwise NOT (only on operand A)
            default: result = 8'b0;     // Default output
        endcase
    end

endmodule


#TESTBENCH

module alu_tb;

    reg [7:0] a;     // Operand A
    reg [7:0] b;     // Operand B
    reg [2:0] op;    // Operation code
    wire [7:0] result; // Result

    alu uut (
        .a(a),
        .b(b),
        .op(op),
        .result(result)
    );

    initial begin
        $dumpfile("alu_tb.vcd");
        $dumpvars(0, alu_tb);

        // Test cases
        #10 a = 8'd10; b = 8'd5; op = 3'b000; // Addition
        #10 $display("Addition: %d + %d = %d", a, b, result);

        #10 op = 3'b001; // Subtraction
        #10 $display("Subtraction: %d - %d = %d", a, b, result);

        #10 op = 3'b010; // Bitwise AND
        #10 $display("Bitwise AND: %d & %d = %d", a, b, result);

        #10 op = 3'b011; // Bitwise OR
        #10 $display("Bitwise OR: %d | %d = %d", a, b, result);

        #10 op = 3'b100; // Bitwise NOT
        #10 $display("Bitwise NOT: ~%d = %d", a, result);

        #10 $finish;
    end

endmodule

